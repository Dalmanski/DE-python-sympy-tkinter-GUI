import sympy as sp
import string
import re
import tkinter as tk
import customtkinter as ctk
import math
import tkinter.font as tkFont
import numpy as np
from customtkinter import *
from tkinter import ttk, font
from sympy import symbols, Function, dsolve, Eq, exp, simplify, sympify, tan, sin, cos, asin, acos, atan, Derivative, SympifyError, sqrt, log
from PIL import Image, ImageTk
from scipy.optimize import fsolve

def replacement(problem):
    replacements = {
        ' ': '',
        'e^': 'exp',
        '^': '**',
        '{': '(',
        '}': ')'
    }   
    for find, replace in replacements.items():
        problem = problem.replace(find, replace)
    return problem

def findDVIV(problemText):
    IV = None
    DV = None
    numerator = True
    i = 0
    while i < len(problemText):
        if problemText[i] == 'd':  # If it detects 'd'
            i += 1
            if numerator:  # If this is NUMERATOR
                DV = ""
                while i < len(problemText) and problemText[i] not in ['+', '-', '*', '/', '=']:  # Repeat until it finds a symbol
                    DV += problemText[i]
                    i += 1
                numerator = False  # After numerator, it will change to the denominator target
            elif not numerator:  # If this is DENOMINATOR
                IV = ""
                while i < len(problemText) and problemText[i] not in ['+', '-', '*', '/', '=']:  # Repeat until it finds a symbol
                    IV += problemText[i]
                    i += 1
                numerator = True  # After denominator, it will change to the numerator target
        i += 1
    return DV, IV

def Separable_Variables(): 
    # Get the input of the user
    problem = entries[0].get() 
    # Remove space
    problem = problem.replace(' ','') 
    problem = problem.lower()
    # Find the Dependent variable and Independent variable, for ex: DV is y, while IV is x
    DV, IV = findDVIV(problem) 
 
    # Ex: if DV=y and IV=x, replace dy/dx to Derivative(y,x)
    problem = problem.replace("d" + DV + "/d" + IV, "Derivative(" + DV + "," + IV + ")") 
    # Replace the symbol to make it work when sympify like from ^ to **
    problem = replacement(problem) 
    # I replace the word "Derivative" to "|" to prevent changing letter of DV and IV from the str "Derivative"
    problem = problem.replace("Derivative", "|") 
    # Make sure the DV is distributed to IV. Ex: if DV=y and IV=x, replace y to y(x)
    problem = problem.replace(DV, DV + "(" + IV + ")") 
    # After that, I replace back from "|" to "Derivative"
    problem = problem.replace("|", "Derivative") 
    # Initialize variables to store left-hand side and right-hand side of equations
    eqlhs, eqrhs = problem.split('=')
    # Convert str to sympify and merge them into Eq()
    eqlhs = sympify(eqlhs)   
    eqrhs = sympify(eqrhs)
    equation = Eq(eqlhs, eqrhs)
    # This will display the solution, sp.pretty() is used to make the output much cleaner
    result_text = f"\n<SOLUTION>\n"
    result_text += f"\nEquation :\n{sp.pretty(equation)}\n"
    # Solve the seperable variable using dsolve()
    solution = dsolve(equation)
    result_text += f"\nFinal answer:\n{sp.pretty(solution)}"
    return result_text

def Growth_And_Decay(p1, p2, rp, rt, t1, t2, p3):
    find = None

    if p1 == '?':
        result_text = "\nSorry, we didn't have a formula on finding p1"
        return result_text
    elif rp == '?':
        result_text = "\nSorry, we didn't have a formula on finding rp"
        return result_text
    elif rt == '?':
        result_text = "\nSorry, we didn't have a formula on finding rt"
        return result_text
    elif t1 == '?':
        find = 't1'
    elif t2 == '?':
        result_text = "\nSorry, we didn't have a formula on finding t2"
        return result_text
    elif p2 == '?':
        result_text = "\nSorry, we didn't have a formula on finding p2"
        return result_text
    elif p3 == '?':
        find = 'p3'
    else:
        result_text = "\nSome of them are missing..."
        return result_text
    
    # Show the Given
    result_text = "\n<SOLUTION>\n"

    p1 = float(p1)
    rp = float(rp)
    rt = float(rt)
    if t1 != '?':
        t1 = float(t1)
    else:
        result_text += "\nFind t1\n"
        t1 = int(0)
    t2 = float(t2)
    p2 = float(p2)
    if p3 != '?':
        p3 = float(p3)
    else:
        result_text += "\nFind p3\n"
        p3 = int(0)

    result_text += "\nGiven:"
    result_text += f"\nInitial Population (p1) = {int(p1)}"
    result_text += f"\nRate percent (rp) = {int(rp)}"
    result_text += f"\nRate time (rt) = {int(rt)}"
    result_text += f"\nTime (t1) = {int(t1)}"
    result_text += f"\nTime (t2) = {int(t2)}"
    result_text += f"\nPopulation (p2) = {int(p2)}"
    result_text += f"\nPopulation at t={int(t2)} (p3) = {int(p3)}\n"

    # Get the value of c
    c = p1 - t1

    result_text += "\np1 = ce^(k*t1)"
    result_text += f"\n{int(p1)} = ce^(k({t1}))"
    result_text += f"\nc = {int(c)}\n"
    
    # Calculate population
    if int(rp) != 0:
        # This is the formula of finding k
        k = np.log(1 + (rp / 100)) / rt
        # Show the solution
        result_text += f"\np2 = {int(p1)}(1 + {rp / 100}) = {int(p1*(1 + (rp / 100)))}\n"
        result_text += "\np2 = ce^(k(rt))"
        result_text += f"\n{int(p1*(1 + (rp / 100)))} = {int(c)}e^k({int(rt)})"
        result_text += f"\nk = {k:.6f}\n"
    else: 
        # If there's no rate percent (rp), Calculate the decay constant
        # This is the formula of finding k
        k = np.log(p2 / p1) / rt 
        # Show the solution
        result_text += "\np2 = ce^(k(rt))"
        result_text += f"\n{int(p2)} = {int(c)}e^(k({int(rt)}))"
        result_text += f"\nk = {k:.6f}\n"

    if find == 'p3':
        # Show the total population by using this formula p1 * exp(k * t2), k.:6f means 6 decimals while .:2f is 2 decimals
        P_t = c * np.exp(k * t2)
        # Calculate rate of population growth
        growth_rate = P_t * k  
        result_text += "\np3 = ce^(k(t2))"
        result_text += f"\np3 = {int(c)}e^({k:.6f}({int(t2)}))"
        result_text += f"\np3 = {P_t:.2f}\n"
        # Show the growth rate
        result_text += "\ndP/dt = (c*k)*e^(k(t2))"
        result_text += f"\ndP/dt = {int(c)}({k:.6f})e^{k:.6f}*{int(t2)}"
        result_text += f"\ndP/dt = {growth_rate:.2f}p/yr\n"
        # Update result text with calculated values. math.ceil() means to round up decimal numbers
        result_text += f"\nPopulation after {int(t2)} years: {math.ceil(P_t)}"
        result_text += f"\nRate of population growth at t = {int(t2)}: {math.ceil(growth_rate)}\n"
    elif find == 't1':
        # This is the formula to get Half life, abs() means convert to positive numbers, math.log() means logarithm
        t1 = -math.log(c / p3) / k
        # This part will show the final answer
        result_text += f"\nHalf-life: t1 = -log({int(c)} / {int(p3)}) / {k:.6f}"
        result_text += f"\nHalf-life: t1 = {t1:.2f}"

    return result_text

def Newtons_Law_of_Cooling_Heating(T1, Tm, T2, t1, t2, t3, T3):  
    find = None      
    if T1 == '?':
        result_text = "\nSorry, we didn't have a formula on finding T1"
        return result_text
    elif Tm == '?':
        result_text = "\nSorry, we didn't have a formula on finding Tm"
        return result_text
    elif T2 == '?':
        result_text = "\nSorry, we didn't have a formula on finding T2"
        return result_text
    elif t1 == '?':
        result_text = "\nSorry, we didn't have a formula on finding t1"
        return result_text
    elif t2 == '?':
        result_text = "\nSorry, we didn't have a formula on finding t2"
        return result_text
    elif t3 == '?':
        find = 't3'
    elif T3 == '?':
        find = 'T3'
    else:
        result_text = "\nSome of them are missing..."
        return result_text
    
    # Show the Given
    result_text = "\n<SOLUTION>\n"
    
    T1 = float(T1) 
    Tm = float(Tm)
    T2 = float(T2)
    t2 = float(t2)
    if t3 != '?':
        t3 = float(t3)
    else:
        result_text += "\nFind t3\n"
        t3 = int(0)
    if T3 != '?':
        T3 = float(T3)
    else:
        result_text += "\nFind T3\n"
        T3 = int(0)

    result_text += "\nGiven:"
    result_text += f"\nInitial Temperature (T1) = {int(T1)}"
    result_text += f"\nRoom Temperature (Tm) = {int(Tm)}"
    result_text += f"\nAfter Temperature (T2) = {int(T2)}"
    result_text += f"\nInitial Time (t1) = {int(t1)}"
    result_text += f"\nMinute later (t2) = {int(t2)}"
    result_text += f"\nTime after (t3) = {int(t3)}"
    result_text += f"\nTemperature after t = {int(t3)} (T3) = {int(T3)}\n"

    def temperature_reading(C, room_temperature, t, rate_constant):
        # Calculate the temperature reading at time t, formula: Tm + Ce^(-k*t2))
        temperature = room_temperature + C * np.exp(rate_constant * t)   
        return temperature

    # Formula of C
    C = T1 - Tm
    # Calculate the rate constant
    equation = lambda rate_constant: Tm + C * np.exp(rate_constant * t2)
    # Solve for the rate constant using the temperature_after_min value
    rate_constant = fsolve(lambda x: equation(x) - T2, 0.2)[0]
    result_text += "\nT1 = Tm + Ce^(k*t1)"
    result_text += f"\n{int(T1)} = {int(Tm)} + Ce^(k{t1})"
    result_text += f"\nC = {int(C)}Â°\n"

    result_text += f"\nT2 = Tm + Ce^k(t2)"
    # equation(rate_constant) is a formula of finding T2
    result_text += f"\n{int(equation(rate_constant))} = {int(Tm)} + {int(C)}e^k({int(t2)})"
    result_text += f"\nk = {rate_constant:.8f}\n"

    if find == 'T3':
        # This is the formula to find the temperature after time (T3)
        # Calculate the temperature reading after minutes
        temperature_after_t3 = temperature_reading(C, Tm, t3, rate_constant)
        # Show the solution and final answer
        result_text += "\nT3 = Tm + Ce^(k*t)"
        result_text += f"\nT3 = {int(Tm)} + {int(C)}e^({rate_constant:.8f}*{int(t2)}))\n"
        result_text += f"\nTemperature reading after t = {int(t3)}: {temperature_after_t3:.2f}Â°\n"
    elif find == 't3':
        # This is the formula to find the Time after (t3)
        def find_time_for_temperature(target_temperature, rate_constant):
            # Define the equation for temperature at time t, formula: Tm + C * exp(k*t2)) - T3
            equation = lambda t: temperature_reading(C, Tm, t, rate_constant) - target_temperature
            # Solve for time using fsolve
            time = fsolve(equation, 0.2)[0]
            return time
        # Find the time for a target temperature
        target_temperature = T3
        # Formula: find time for temperature = Tm + C * exp(k*t2)
        time_for_target_temperature = find_time_for_temperature(target_temperature, rate_constant)
        # Show the solution and final answer
        result_text += "\nT3 = Tm + Ce^(k*t2)"
        result_text += f"\n{int(T3)} = {int(Tm)} + {int(C)}e^({rate_constant:.8f}*{int(t2)})"
        result_text += f"\nT3 = {time_for_target_temperature:.2f}\n"
        result_text += f"\nTime for target temperature ({target_temperature}Â°): {math.ceil(time_for_target_temperature)} sec\n"

    return result_text


#FRONT END, diri mo mag design2 ------------------------------------------------------------------------------------------------------------
def main(): 

    root = CTk()
    set_appearance_mode("dark")
    root.title('Differential Equation')
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    root.geometry(f"{screen_width-100}x{screen_height-100}")
    root._state_before_windows_set_titlebar_color = 'zoomed'
    # root.resizable(False, False)

    def load_image(root, current_index, image_paths):
        global label  # Access the global label variable
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        img_path = image_paths[current_index]
        img = Image.open(img_path).resize((screen_width + 385, screen_height + 200))
        photo_image = ImageTk.PhotoImage(img)
        label = tk.Label(root, image=photo_image)
        label.place(x=-2, y=-2)
        label.lower()
        label.image = photo_image  # Keep a reference to the image to prevent it from being garbage collected
        label.pack(expand=True, fill='both')
        return label

    def show_image(root, current_index, image_paths):
        global label  # Access the global label variable
        label.destroy()  # Destroy the existing label widget
        return load_image(root, current_index, image_paths)
    
    image_paths = ["design1.jpg", "design2.jpg", "design3.jpg"]
    # Load the initial image
    label = load_image(root, 0, image_paths)
    show_image(root, 0, image_paths)

    # Create a ComboBox
    style = ttk.Style()
    style.theme_use('clam')
    root.tk.call("source", "Azure/azure.tcl")
    root.tk.call("set_theme", "dark")
    style.configure('TCombobox', relief='solid', highlightbackground='black', highlightcolor='black', highlightthickness=0, justify='center')
    
    combo = ttk.Combobox(root, style='TCombobox', font=('Terminal', 20), state='readonly', justify='center')
    combo.set('Pick a topic')   
    combo['values'] = ('Separable Variables', 'Growth and Decay', 'Newton\'s Law of Cooling/Heating')
    selected_item = combo.get()
    combo.pack(fill='x')
    combo.place(relx=0.5, rely=0.5, anchor='center', y=-300)
    combo.configure(width=50)

    global dy_dx, eqlhs
    global entries

    def on_select(event):
        global entries
        topic = combo.get()
        listbox.config(state=tk.NORMAL)
        entryText.config(state=tk.NORMAL)
        clear_listbox(listbox)
        clear_listbox(entryText)

        if topic == "Separable Variables":
            show_image(root, 0, image_paths)
            insert_multiline_text(entryText, "INPUT:")
            result_text = "\nThis is Separable Variables.\n"
            result_text += "\nExample:"
            result_text += "\ntan(x) * dy/dx - y = 0"
            result_text += "\ndy/dx - y**2 * exp(-2*x) = 0"
            result_text += "\ndy/dx - 3*x^2*y = 0"
            result_text += "\ndy/dx=2*x*y+3*y-4*x-6"
            result_text += "\ndy/dx = f(x)/g(y)"
            insert_multiline_text(listbox, result_text)
            entries = entryShow(1)
        elif topic == "Growth and Decay":
            show_image(root, 1, image_paths)
            insert_multiline_text(entryText, "p1:              p2:               rp:               rt:                t1:                t2:               p3:")
            result_text = "\nThis is Growth and Decay.\n"
            result_text += "\nInput example:"
            result_text += "\np1=5000, p2=5000, rp=15, rt=10, t1=0, t2=30, p3=?"
            result_text += "\np1=100,  p2=96,  rp=0,  rt=100, t1=0, t2=258,  p3=?"
            result_text += "\np1=100,  p2=96,  rp=0,  rt=100, t1=?, t2=258,  p3=50"
            insert_multiline_text(listbox, result_text)
            entries = entryShow(7)
        elif topic == "Newton\'s Law of Cooling/Heating":
            show_image(root, 1, image_paths)
            insert_multiline_text(entryText, "T1:              Tm:               T2:               t1:                t2:                t3:               T3:")
            result_text = "\nThis is Newton\'s Law of Cooling/Heating\n"
            result_text += "\nInput example:"
            result_text += "\nT1=18, Tm=70, T2=31, t1=0, t2=1, t3=5, T3=?"
            result_text += "\nT1=20, Tm=100, T2=22, t1=0, t2=1, t3=?, T3=90"
            result_text += "\nT1=20, Tm=100, T2=22, t1=0, t2=1, t3=?, T3=98" 
            insert_multiline_text(listbox, result_text)
            entries = entryShow(7)

        #print(f"Selected option: {topic}")
        listbox.config(state=tk.DISABLED)
        entryText.config(state=tk.DISABLED)
    
    # Bind the function to the <<ComboboxSelected>> event
    combo.bind("<<ComboboxSelected>>", on_select)

    def insert_multiline_text(text_widget, text):
        lines = text.split('\n')
        for line in lines:
            #text_widget.insert(tk.END, line + '\n')
            text_widget.tag_configure("tag-center", justify='center')
            text_widget.insert('end', line + '\n' ,'tag-center')

    def clear_listbox(listbox):
        listbox.delete(1.0, tk.END)

    def is_valid_sympy_expression(expression_str):
        expression_str = expression_str.lower()
        eqlhs, eqrhs = expression_str.split('=')
        try:
            sympify(eqlhs)
            sympify(eqrhs)
            return True
        except SympifyError:
            return False

    def button_clicked():
        global entries
        selected_item = combo.get()
        user_function = entries[0].get()
        listbox.config(state=tk.NORMAL)
        clear_listbox(listbox)
        if selected_item != "Pick a topic":
            if user_function:
                if selected_item != "Growth and Decay" and selected_item != "Newton\'s Law of Cooling/Heating" and '=' in user_function:
                    if is_valid_sympy_expression(user_function):
                        if selected_item == "Separable Variables":
                            result_text = Separable_Variables()
                            insert_multiline_text(listbox, result_text)
                        else:
                            result_text = "\nInvalid...\n"
                            insert_multiline_text(listbox, result_text)
                    else:
                        result_text = "\nThis is not a correct equation.\n"
                        result_text += "\nThe correct way to enter an equation is like this:"
                        result_text += "\ndy/dx = 2*x*y + 3*y - 4*x - 6"
                        result_text += "\ntan(x) * dy/dx - y = 0\n"
                        result_text += "\nMake sure that there's multiplication (*) between terms.\n"
                        insert_multiline_text(listbox, result_text)
                elif selected_item == "Growth and Decay":
                    inp1 = entries[0].get()
                    inp2 = entries[1].get()
                    inp3 = entries[2].get()
                    inp4 = entries[3].get()
                    inp5 = entries[4].get()
                    inp6 = entries[5].get()
                    inp7 = entries[6].get()
                    result_text = Growth_And_Decay(inp1, inp2, inp3, inp4, inp5, inp6, inp7)
                    insert_multiline_text(listbox, result_text)
                elif selected_item == "Newton\'s Law of Cooling/Heating":
                    inp1 = entries[0].get()
                    inp2 = entries[1].get()
                    inp3 = entries[2].get()
                    inp4 = entries[3].get()
                    inp5 = entries[4].get()
                    inp6 = entries[5].get()
                    inp7 = entries[6].get()
                    result_text = Newtons_Law_of_Cooling_Heating(inp1, inp2, inp3, inp4, inp5, inp6, inp7)
                    insert_multiline_text(listbox, result_text)
                else:
                    result_text = f"\nThere's no = sign.\n"
                    insert_multiline_text(listbox, result_text)
            else:
                result_text = f"\nYour input is empty.\n"
                insert_multiline_text(listbox, result_text)
        else:
            result_text = f"\nYou didn't change the topic.\n"
            insert_multiline_text(listbox, result_text)

        listbox.config(state=tk.DISABLED)

    def create_entry(root, x_offset, numEntry):
        entry = tk.Entry(root, relief='flat', highlightthickness=0, justify='center', font=('Verdana', 16))
        entry.pack(fill='x')
        entry.place(relx=0.5, rely=0.5, anchor='center', x=x_offset-420, y=-145)
        entry.config(bg="#3A3A3A", fg="white")
        entry.configure(width=8)
        return entry

    def entryShow(numEntry):
    # Destroy existing entries, excluding the ComboBox
        for widget in root.winfo_children():
            if isinstance(widget, tk.Entry) and widget.winfo_name() != combo.winfo_name():
                widget.destroy()
        entries = []
        if numEntry == 1:
            entry = tk.Entry(root, relief='flat', highlightthickness=0, justify='center', font=('Verdana', 16))
            entry.pack(fill='x')
            entry.place(relx=0.5, rely=0.5, anchor='center', x=-0, y=-145)
            entry.config(bg="#3A3A3A", fg="white")
            entry.configure(width=70)
            entries.append(entry)
        else:
            # Create and configure entries dynamically based on numEntry
            entries = [create_entry(root, 140 * i, numEntry) for i in range(numEntry)]
        return entries

    # Call entryShow with the desired number of entries to show 
    entries = entryShow(1)

    entryText = tk.Text(root, relief='flat', highlightthickness=0, wrap='none', height=1, font=('Verdana', 14) )
    entryText.pack(fill='x')
    entryText.place(relx=0.5, rely=0.5, anchor='center', x=0, y=-200)
    entryText.config(bg="black", fg="white")
    # Create a Font object and configure it to be bold
    bold_font = font.Font(entryText, entryText.cget("font"))
    bold_font.configure(weight="bold")
    entryText.configure(font=bold_font, width=100)
    result_text = "INPUT:"
    entryText.tag_configure("tag-center", justify='center')
    entryText.insert('end', result_text ,'tag-center')

    # Create a button to trigger the action
    button = ctk.CTkButton(
        master=root,
        text="C O M P U T E",
        corner_radius=10,
        command=button_clicked,
        width=300,
        height=35,
        fg_color="black",  # Text color
        bg_color="black",  # Background color
        border_width=1,
        border_color="white",
        font=('Julius', 20, "bold")
    )
    button.place(relx=0.5, rely=0.5, anchor=ctk.CENTER, y=-40)

    # Create a button to reset
    reset_button = ctk.CTkButton(
        master=root,
        text="RESET",
        corner_radius=10,
        command=on_select,
        width=100,
        height=35,
        fg_color="black",  # Text color
        bg_color="black",  # Background color
        border_width=1,
        border_color="white",
        font=('Julius', 15, "bold")
    )
    reset_button.place(relx=0.5, rely=0.5, anchor=ctk.CENTER, x=500, y=-40)
    # Bind the left mouse button click event to on_select function
    reset_button.bind("<Button-1>", on_select)
    
    # Define custom font
    listbox = tk.Text(root, bg="#3A3A3A", wrap=tk.WORD, width=87, height=10, font=('Terminal', 20), relief='flat', spacing1=10, spacing2=10, spacing3=10)
    listbox.place(relx=0.5, rely=0.5, anchor='center', y=240)
    result_text = "\nWelcome to Differential Equation.\n"
    result_text += "\nPick a topic."
    listbox.tag_configure("tag-center", justify='center')
    listbox.insert('end', result_text ,'tag-center')

    # Disable text editing
    listbox.config(state=tk.DISABLED)
    entryText.config(state=tk.DISABLED)

    root.mainloop()

if __name__ == '__main__':
    main()